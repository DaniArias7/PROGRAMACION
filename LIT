from abc import ABC, abstractmethod

class Condition(ABC):
    @abstractmethod
    def evaluate(self, sequence: str) -> bool:
        pass

class LengthCondition(Condition):
    def _init_(self, min_length: int = 50):
        self.min_length = min_length

    def evaluate(self, sequence: str) -> bool:
        return len(sequence) > self.min_length

class GCContentCondition(Condition):
    def _init_(self, min_gc_content: float = 60.0):
        self.min_gc_content = min_gc_content

    def evaluate(self, sequence: str) -> bool:
        gc_count = sum(base in ('G', 'C') for base in sequence)
        gc_content = (gc_count / len(sequence)) * 100
        return gc_content > self.min_gc_content

class ATGPresenceCondition(Condition):
    def _init_(self):
        pass

    def evaluate(self, sequence: str) -> bool:
        return 'ATG' in sequence

class CTAPresenceCondition(Condition):
    def _init_(self):
        pass

    def evaluate(self, sequence: str) -> bool:
        return sequence.count('CTA') >= 3

class ADNAnalyzer:
    def _init_(self, data_file: str):
        self.data_file: str = data_file
        self.conditions: list = []

    def add_condition(self, condition: Condition):
        self.conditions.append(condition)

    @staticmethod
    def _validate_sequence(sequence: str) -> bool:
        return all(base in ('A', 'T', 'C', 'G') for base in sequence)

    def _evaluate_conditions(self, sequence: str) -> str:
        for condition in self.conditions:
            if not condition.evaluate(sequence):
                return "ADN no satisfactorio"
        return "ADN perfecto, posible forma de vida" if len(self.conditions) == 4 else "ADN bueno"

    def analyze(self) -> dict:
        results = {}
        with open(self.data_file, 'r') as file:
            current_organism = None
            current_sequence = ""
            for line in file:
                line = line.strip()
                if line.startswith('>'):
                    if current_organism is not None:
                        if not self._validate_sequence(current_sequence):
                            raise ValueError('El archivo contiene secuencias inválidas')
                        results[current_organism] = self._evaluate_conditions(current_sequence)
                    current_organism = line[1:]
                    current_sequence = ""
                else:
                    current_sequence += line
            if current_organism is not None:
                if not self._validate_sequence(current_sequence):
                    raise ValueError('El archivo contiene secuencias inválidas')
                results[current_organism] = self._evaluate_conditions(current_sequence)
            return  results
